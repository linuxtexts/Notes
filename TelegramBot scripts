
	import subprocess
	from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
	from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
	
	# Function to execute the bash script
	def execute_bash_script():
	    script_path = "/user/local/admin/new_key.sh"  # Specify the path to your script
	    try:
	        result = subprocess.run([script_path], capture_output=True, text=True)
	        return result.stdout  # Return the output of the script
	    except Exception as e:
	        return f"Error executing script: {str(e)}"
	
	# Handler for the /start command
	def start(update: Update, context: CallbackContext) -> None:
	    user = update.effective_user
	    # Welcome message
	    update.message.reply_text(f'Hello, {user.first_name}! Click the button to get a key.')
	
	    # Create a button
	    keyboard = [[InlineKeyboardButton("Get key", callback_data='get_key')]]
	    reply_markup = InlineKeyboardMarkup(keyboard)
	
	    # Send message with the button
	    update.message.reply_text("Click the button below to request a key:", reply_markup=reply_markup)
	
	# Button click handler
	def button_handler(update: Update, context: CallbackContext) -> None:
	    query = update.callback_query
	    query.answer()
	
	    # Check which button the user clicked
	    if query.data == 'get_key':
	        # Execute the script and get the result
	        script_output = execute_bash_script()
	
	        # Send the result back to the user
	        query.edit_message_text(text=f"Your key: {script_output}")
	
	# Main function
	def main() -> None:
	    # Replace 'YOUR_TOKEN' with your bot's token
	    updater = Updater("YOUR_TOKEN")
	
	    # Register handlers
	    updater.dispatcher.add_handler(CommandHandler("start", start))
	    updater.dispatcher.add_handler(CallbackQueryHandler(button_handler))
	
	    # Start the bot
	    updater.start_polling()
	
	    # Run the bot until manually stopped
	    updater.idle()
	
	if __name__ == '__main__':
	    main()


-------------- script to send text message to telegram -----------------------------

        #!/bin/bash

        # Variables
        BOT_TOKEN="sdfsdfssadfadsfafdadf"   # Your bot token obtained from @BotFather
        CHAT_ID="227909746"       # Your Chat ID
        MESSAGE="Warning Nginx is down"  # Message text

        # Telegram API URL
        URL="https://api.telegram.org/bot$BOT_TOKEN/sendMessage"

        # Sending the message via curl and tor socks5 proxy
        curl -s -X POST --socks5 127.0.0.1:9050 $URL -d chat_id=$CHAT_ID -d text="$MESSAGE"

        # Output result
        if [ $? -eq 0 ]; then
          echo "Message sent successfully"
        else
          echo "Failed to send message"
        fi

-------------------- Check nginx status at remoute server ------------------------------------------------

	#!/bin/bash

	# Specify the IP address of the remote server
	REMOTE_SERVER="121.66.33.11"
	
	# SSH port for connection
	SSH_PORT="22333"
	
	# Path to the log file to check on the remote server
	LOG_FILE="/var/log/check_nginx_script.log"
	
	# Command to check the file on the remote server
	CHECK_COMMAND="grep 'Failed to reload Nginx' $LOG_FILE"
	
	# Infinite loop to run the script every 3 hours
	while true; do
	    # Attempt to connect to the remote server via the specified port and execute the command
	    ssh -q -o ConnectTimeout=10 -o ProxyCommand="nc -X 5 -x 127.0.0.1:9050 %h %p" -i $dedic1_cert -p $SSH_PORT root$REMOTE_SERVER "$CHECK_COMMAND" > /dev/null 2>&1
	    SSH_EXIT_CODE=$?
	
	    # Check if the SSH connection was successful
	    if [ $SSH_EXIT_CODE -eq 0 ]; then
	        # Check if the 'Failed to reload Nginx' line is present in the log file
	        if ssh -q -p $SSH_PORT $REMOTE_SERVER "$CHECK_COMMAND"; then
	            echo "Warning: check nginx at server $REMOTE_SERVER"
	        else
	            echo "Nginx is working correctly on server $REMOTE_SERVER"
	        fi
	    else
	        # Output a message if the SSH connection failed
	        echo "SSH connection failed to server $REMOTE_SERVER"
	    fi
	
	    # Wait for 3 hours (10800 seconds) before running the check again
	    sleep 10800
	done


----------------------Script download und upload files to remout server using ssh--------------------------
	
 	#!/bin/bash

	# Function to display the menu
	show_menu() {
	    echo "1) Upload a file"
	    echo "2) Download a file"
	    echo "3) Exit"
	}
	
	# Function for file upload
	upload_file() {
	    read -p "Enter the path of the file to upload: " local_file
	    read -p "Enter the destination path on the server: " remote_path
	    read -p "Use password or certificate for authentication? (p/c): " auth_method
	    read -p "Enter your SOCKS5 proxy (host:port): " proxy
	
	    # Handle authentication method
	    if [[ "$auth_method" == "p" ]]; then
	        read -sp "Enter your password: " password
	        sshpass -p "$password" rsync -avz -e "ssh -o ProxyCommand=nc -X 5 -x $proxy %h %p -o StrictHostKeyChecking=no" "$local_file" "$user@$ip:$remote_path"
	    elif [[ "$auth_method" == "c" ]]; then
	        read -p "Enter the path to your private key: " private_key
	        rsync -avz -e "ssh -o ProxyCommand=nc -X 5 -x $proxy %h %p -i $private_key -o StrictHostKeyChecking=no" "$local_file" "$user@$ip:$remote_path"
	    else
	        echo "Invalid authentication method."
	    fi
	}
	
	# Function for file download
	download_file() {
	    read -p "Enter the path of the file to download from the server: " remote_file
	    read -p "Enter the local path to save the file: " local_path
	    read -p "Use password or certificate for authentication? (p/c): " auth_method
	    read -p "Enter your SOCKS5 proxy (host:port): " proxy
	
	    # Handle authentication method
	    if [[ "$auth_method" == "p" ]]; then
	        read -sp "Enter your password: " password
	        sshpass -p "$password" rsync -avz -e "ssh -o ProxyCommand=nc -X 5 -x $proxy %h %p -o StrictHostKeyChecking=no" "$user@$ip:$remote_file" "$local_path"
	    elif [[ "$auth_method" == "c" ]]; then
	        read -p "Enter the path to your private key: " private_key
	        rsync -avz -e "ssh -o ProxyCommand=nc -X 5 -x $proxy %h %p -i $private_key -o StrictHostKeyChecking=no" "$user@$ip:$remote_file" "$local_path"
	    else
	        echo "Invalid authentication method."
	    fi
	}
	
	# Read server IP and user information
	read -p "Enter the server IP address: " ip
	read -p "Enter your username: " user
	
	# Main loop
	while true; do
	    show_menu
	    read -p "Choose an option: " option
	
	    case $option in
	        1) upload_file ;;
	        2) download_file ;;
	        3) echo "Exiting..."; exit 0 ;;
	        *) echo "Invalid option. Please try again." ;;
	    esac
	done


-------------------------------------------- version 2 -----------------------------------------------------------

	#!/bin/bash

	#Function to display the menu
	show_menu() {
	    echo "1) Upload a file"
	    echo "2) Download a file"
	    echo "3) Exit"
	}
	
	#Function for file upload
	upload_file() {
	    read -p "Enter the path of the file to upload: " local_file
	    read -p "Enter the destination path on the server: " remote_path
	    read -p "Use password or certificate for authentication? (p/c): " auth_method
	    read -p "Enter your SOCKS5 proxy (host:port): " proxy
	
	    # Handle authentication method
	    if [[ "$auth_method" == "p" ]]; then
	        read -sp "Enter your password: " password
	        rsync -avz -e "ssh -o ProxyCommand=nc -X 5 -x $proxy %h %p -o StrictHostKeyChecking=no" "$local_file" "$user@$ip:$remote_path"
	    elif [[ "$auth_method" == "c" ]]; then
	        read -p "Enter the path to your private key: " private_key
	        rsync -avz -e "ssh -o ProxyCommand=nc -X 5 -x $proxy %h %p -i $private_key -o StrictHostKeyChecking=no" "$local_file" "$user@$ip:$remote_path"
	    else
	        echo "Invalid authentication method."
	    fi
	}
	
	#Function for file download
	download_file() {
	    read -p "Enter the path of the file to download from the server: " remote_file
	    read -p "Enter the local path to save the file: " local_path
	    read -p "Use password or certificate for authentication? (p/c): " auth_method
	    read -p "Enter your SOCKS5 proxy (host:port): " proxy
	
	    # Handle authentication method
	    if [[ "$auth_method" == "p" ]]; then
	        read -sp "Enter your password: " password
	        rsync -avz -e "ssh -o ProxyCommand=nc -X 5 -x $proxy %h %p -o StrictHostKeyChecking=no" "$user@$ip:$remote_file" "$local_path"
	    elif [[ "$auth_method" == "c" ]]; then
	        read -p "Enter the path to your private key: " private_key
	        rsync -avz -e "ssh -o ProxyCommand=nc -X 5 -x $proxy %h %p -i $private_key -o StrictHostKeyChecking=no" "$user@$ip:$remote_file" "$local_path"
	    else
	        echo "Invalid authentication method."
	    fi
	}
	
	#Read server IP and user information
	read -p "Enter the server IP address: " ip
	read -p "Enter your username: " user
	
	#Main loop
	while true; do
	    show_menu
	    read -p "Choose an option: " option
	
	    case $option in
	        1) upload_file ;;
	        2) download_file ;;
	        3) echo "Exiting..."; exit 0 ;;
	        *) echo "Invalid option. Please try again." ;;
	    esac
	done
